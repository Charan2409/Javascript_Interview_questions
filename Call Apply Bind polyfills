call polyfill : 
let car1 = {
  color: 'Red',
  company: 'Ferrari',
};

function purchaseCar(currency , price ){
    console.log(`I purchased ${this.color} ${this.company} for ${currency}${price}`);
}

Function.prototype.myCall = function (context = {}, ...args){
    if(typeof this !== 'function'){
        throw new Error(`${this} - its not callable`)
    }
    
    context.fn = this;
    context.fn(...args)
}

purchaseCar.myCall(car1, "Rs.", 100000 );

--------------------------------------------------------------------------------------------------------------
Apply polyfill : 

let car1 = {
  color: 'Red',
  company: 'Ferrari',
};

function purchaseCar(currency , price ){
    console.log(`I purchased ${this.color} ${this.company} for ${currency}${price}`);
}

Function.prototype.myApply = function (context = {}, args = []){
    if(typeof this !== 'function'){
        throw new Error(`${this} - its not callable`)
    }
    if(!Array.isArray(args)){
        throw new Error("CreateListfromArray like called on non-object");
    }
    
    context.fn = this;
    context.fn(...args)
}

purchaseCar.myApply(car1, ["Rs.", 100000]);

======================================================================================================================
Bind Polyfill : 
let car1 = {
  color: 'Red',
  company: 'Ferrari',
};

function purchaseCar(currency , price ){
    console.log(`I purchased ${this.color} ${this.company} for ${currency}${price}`);
}

Function.prototype.myBind = function (context = {}, ...args){
    if(typeof this !== 'function'){
        throw new Error(`${this} - its not callable`)
    }
   
    
    context.fn = this;
    return function (...args){
        return context.fn(...args)
    }
}

const newFunc = purchaseCar.myBind(car1);
newFunc("Rs.",100000)
